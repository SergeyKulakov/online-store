diff --git a/node_modules/@brandingbrand/fscomponents/src/components/Grid/Grid.js b/node_modules/@brandingbrand/fscomponents/src/components/Grid/Grid.js
index fa666b9..d008185 100644
--- a/node_modules/@brandingbrand/fscomponents/src/components/Grid/Grid.js
+++ b/node_modules/@brandingbrand/fscomponents/src/components/Grid/Grid.js
@@ -39,9 +39,9 @@ const gridStyle = StyleSheet.create({
     },
 });
 // eslint-disable-next-line complexity
-export const Grid = (props) => {
+export const Grid = React.forwardRef((props, ref) => {
     const { accessible, accessibilityHint, accessibilityLabel, accessibilityRole, data, renderItem, BackToTopComponent, BackToTopShowAtHeight, BackToTopStyle, ListEmptyComponent, ListFooterComponent, ListFooterComponentStyle, ListHeaderComponent, ListHeaderComponentStyle, columnWidthTable, gridContainerStyle, insertRows, insertAfter, insertEveryFrequency, insertEveryValues, minColumnWidth, numColumns, onLayout, onRefresh, refreshControl, refreshing, style, dataSet, keyExtractor = DEFAULT_KEY_EXTRACTOR, autoFit, backToTopButtonStyle, backToTopContainerStyle, backToTopShowAtHeight, backToTopText, backToTopTextStyle, columns, listViewProps, renderBackToTopButton, renderFooter, renderHeader, showBackToTop, showColumnSeparators, columnSeparatorStyle, showRowSeparators, rowSeparatorStyle, onEndReached, onEndReachedThreshold, } = props;
-    const listView = useRef(null);
+    const listView = ref ?? useRef(null);
     const [width, setWidth] = useState(() => {
         const containerWidth = StyleSheet.flatten([gridContainerStyle]).width;
         if (typeof containerWidth === 'number') {
@@ -154,5 +154,5 @@ export const Grid = (props) => {
                 BackToTopStyle !== null && BackToTopStyle !== void 0 ? BackToTopStyle : backToTopContainerStyle,
             ] }, isValidElement(BackToTopComponent) ? (BackToTopComponent) : BackToTopComponent ? (React.createElement(BackToTopComponent, { backToTop: handleBackToTop })) : renderBackToTopButton ? (renderBackToTopButton(handleBackToTop)) : (React.createElement(TouchableOpacity, { style: [gridStyle.scrollTopButton, backToTopButtonStyle], onPress: handleBackToTop },
             React.createElement(Text, { style: backToTopTextStyle }, backToTopText !== null && backToTopText !== void 0 ? backToTopText : 'Top')))))));
-};
+});
 //# sourceMappingURL=Grid.js.map
\ No newline at end of file
diff --git a/node_modules/@brandingbrand/fscomponents/src/components/Grid/GridProps.d.ts b/node_modules/@brandingbrand/fscomponents/src/components/Grid/GridProps.d.ts
index c5c5a34..115741b 100644
--- a/node_modules/@brandingbrand/fscomponents/src/components/Grid/GridProps.d.ts
+++ b/node_modules/@brandingbrand/fscomponents/src/components/Grid/GridProps.d.ts
@@ -1,4 +1,4 @@
-import type { ComponentType, ReactElement } from 'react';
+import type { ComponentType, ReactElement, RefObject } from 'react';
 import type { FlatListProps, ListRenderItemInfo, StyleProp, TextStyle, ViewStyle } from 'react-native';
 import type { GridItem, InsertAfterTable, InsertRowTable, WidthTable } from './utils';
 export declare type GridScrollToTopFunc = () => void;
@@ -166,7 +166,6 @@ export interface GridProps<ItemT> extends Pick<FlatListProps<ItemT>, 'accessible
     /**
      * Called once when the scroll position gets within onEndReachedThreshold of the rendered content.
      *
-     * @deprecated to be removed in fs12. Not supported on web. Load More button provides superior UX
      */
     onEndReached?: ((info: {
         distanceFromEnd: number;
@@ -177,11 +176,11 @@ export interface GridProps<ItemT> extends Pick<FlatListProps<ItemT>, 'accessible
      * Thus a value of 0.5 will trigger `onEndReached` when the end of the content is
      * within half the visible length of the list.
      *
-     * @deprecated to be removed in fs12. Not supported on web. Load More button provides superior UX
      */
     onEndReachedThreshold?: number | null;
     /**
      * Wether or not a grid should add columns for empty spaces when all existing items have a column
      */
     autoFit?: boolean;
+    ref?: RefObject;
 }
